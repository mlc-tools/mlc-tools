class Translates<SerializedObject>
{
    function void dummy_function()
    {

    }
}
class TestTranslates<ITestTranslates>
{
    function bool test_dummy_function()
    {
        return true;
    }
    function bool test_strcat()
    {
        std::string a = "a";
        std::string b = "b";
        std::string c = std::strcat(a, b);
        return c == "ab";
    }
    function bool test_strcat2()
    {
        std::string c = std::strcat("a", "b");
        return c == "ab";
    }
    function bool test_create_objects()
    {
        auto object = new Translates();
        return object != nullptr;
    }
    function bool test_listmap()
    {
        list<int> l0;
        list<int*> l1;
        list<std::string> l2;
        list<intrusive_ptr<Translates>> l3;

        map<int, int> m0;
        map<int, int*> m1;
        map<std::string, std::string> m2;
        map<std::string, Translates*> m3;

        list_push(l0, 1);
        list_push(l1, nullptr);
        list_push(l2, "");
        list_push(l3, new Translates());

        m0[0] = 1;
        m1[0] = nullptr;
        m2[""] = "";
        m3[""] = new Translates();

        return true;
    }
    function bool test_to_str()
    {
        int a = 1;
        std::string s = "1";
        return toStr(a) == s;
    }
    function bool test_at()
    {
        bool result = true;

        list<int> vector;
        list_push(vector, 1);
        result = vector.at(0) == 1;

        map<int, int> map;
        map[0] = 1;
        result = map.at(0) == 1;

        return result;
    }
    function bool test_list_remove()
    {
        bool result = true;

        list<int> vector;
        list_push(vector, 1);
        list_push(vector, 2);
        list_push(vector, 3);
        list_push(vector, 4);

        list_remove(vector, 2);
        result = result && list_size(vector) == 3;
        result = result && vector[0] == 1;
        result = result && vector[1] == 3;
        result = result && vector[2] == 4;

        return result;
    }
    function bool test_list_clear()
    {
        bool result = true;

        list<int> vector;
        list_push(vector, 1);
        list_push(vector, 2);
        list_push(vector, 3);
        list_push(vector, 4);

        list_clear(vector);
        result = result && list_size(vector) == 0;
        return result;
    }
    function bool test_string_empty()
    {
        bool result = true;

        result = result && string_empty("");
        result = result && !string_empty("s");
        result = result && !string_empty("1");
        result = result && !string_empty(".");
        return result;
    }
}