enum FooEnum
{
    foo
    bar
}

enum EnumWithIntValue
{
    foo = 0x1
    bar = 0x2
    foo_bar = 0x3
}

class FooEnumTestParent
{
    function void dummy()
    {
    }
}

class TestFooEnumTestParent<ITestFooEnumTestParent>:test
{
    FooEnum enumValue
    FooEnum enumFoo = FooEnum::foo
    FooEnum enumBar = FooEnum::bar

    EnumWithIntValue enum_int1 = EnumWithIntValue::foo
    EnumWithIntValue enum_int2 = EnumWithIntValue::bar
    EnumWithIntValue enum_int3 = EnumWithIntValue::foo_bar

    function void test_dummy()
    {
    }

    function void test_compare()
    {
        this->enumValue = FooEnum::foo;

        this->assertTrue(this->enumValue == FooEnum::foo, "enumValue == FooEnum::foo correct");
        this->assertTrue(this->enumValue == "foo", "enumValue == 'foo' correct");
        this->assertTrue("foo" == this->enumValue, "'foo' == enumValue correct");
    }

    function void test_initialize()
    {
        this->assertTrue(this->enumFoo == FooEnum::foo, "enumFoo initialized as FooEnum::foo correct");
        this->assertTrue(this->enumBar == FooEnum::bar, "enumBar initialized as FooEnum::bar correct");
    }

    function void test_enum_with_int_values()
    {
        this->assertTrue(this->enum_int1 == EnumWithIntValue::foo);
        this->assertTrue(this->enum_int2 == EnumWithIntValue::bar);
        this->assertTrue(this->enum_int3 == EnumWithIntValue::foo_bar);
        this->assertTrue(this->enum_int1 & EnumWithIntValue::foo_bar);
        this->assertTrue(this->enum_int2 & EnumWithIntValue::foo_bar);
        this->assertTrue(this->enum_int3 & EnumWithIntValue::foo_bar);
        this->assertFalse(this->enum_int1 & EnumWithIntValue::bar);
    }
}