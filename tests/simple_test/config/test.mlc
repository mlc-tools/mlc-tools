class SerializedObject:serialized
{
	int _reference_counter:runtime = 1
	function int retain()
	{
		this->_reference_counter += 1;
		return this->_reference_counter;
	}
	function int release()
	{
		this->_reference_counter -= 1;
		auto c = this->_reference_counter;
		if( c == 0)
		{
			delete this;
		}
		return c;
	}
}

class AllTests<SerializedObject>
{
    function bool run(Logger* logger):static
    {
        bool result = true;
        result = logger->push(FunctionTest::tests(logger), "Function tests") && result;
        result = logger->push(DataUnit::tests(logger), "Static data") && result;
        result = logger->push(AllTypes::tests(logger), "AllTypes tests") && result;
        result = logger->push(TestFactory::tests(logger), "TestFactory tests") && result;

        return result;
    }
}

class core/CommandBase<SerializedObject>
{
	int user_id:key = 0
	int current_time = 0
	function string getSerializedString():external:const;
}

class AllTypesChildren<SerializedObject>
{
	int value
}

class AllTypes<SerializedObject>
{
	//simple
	int int_value0 = 0
	int int_value1
	float float_value0 = 0
	float float_value1
	bool bool_value0 = true
	bool bool_value1
	string str_value0 = ""
	string str_value1
	list<int> int_list
	list<float> float_list
	list<bool> bool_list
	list<string> string_list
	map<int, string> int_string_map
	map<float, string> float_string_map
	map<bool, string> bool_string_map
	map<string, string> string_string_map
	map<string, int> string_int_map
	map<string, float> string_float_map
	map<string, bool> string_bool_map

	AllTypesChildren object
	AllTypesChildren* object_ptr = 0
	list<AllTypesChildren> object_list
	list<AllTypesChildren*> object_ptr_list
	map<string, AllTypesChildren> object_map
	map<string, AllTypesChildren*> object_ptr_map

    function void initialize()
    {
        this->int_value0 = 1;
        this->int_value1 = 1;
        this->float_value0 = 1.f;
        this->float_value1 = 1.0f;
        this->bool_value0 = false;
        this->bool_value1 = true;
        this->str_value0 = "test_string";
        this->str_value1 = "test_string";

        list_push(this->int_list, 0);
        list_push(this->int_list, 1);
        list_push(this->float_list, 0.f);
        list_push(this->float_list, 1.f);
        list_push(this->bool_list, true);
        list_push(this->bool_list, true);
        list_push(this->string_list, "0");
        list_push(this->string_list, "1");

        this->int_string_map[0] = "0";
        this->int_string_map[1] = "1";
        this->bool_string_map[true] = "0";
        this->bool_string_map[false] = "1";
        this->float_string_map[0.f] = "0";
        this->float_string_map[1.f] = "1";
        this->string_string_map["0"] = "0";
        this->string_string_map["1"] = "1";

        this->string_int_map["0"] = 0;
        this->string_int_map["1"] = 1;
        this->string_bool_map["0"] = true;
        this->string_bool_map["1"] = false;
        this->string_float_map["0"] = 0.f;
        this->string_float_map["1"] = 1.f;
        this->string_string_map["0"] = "0";
        this->string_string_map["1"] = "1";

        this->object.value = 0;
        this->object_ptr = new AllTypesChildren();
        this->object_ptr->value = 0;

    }

    function bool tests(Logger* logger):static
    {
        bool result = true;

        auto inst = new AllTypes();
        inst->initialize();

        return result;
    }
}

class Request<SerializedObject>:visitor
{
}
class RequestFoo<Request>
{
}
class RequestBar<Request>
{
}

class Response<SerializedObject>:visitor
{
}

enum TestEnum:numeric
{
    value1
    value2
}

enum TestEnumValue1<TestEnum>
{
	int parameter
}

enum TestEnumValue2<TestEnum>
{
	int parameter
}

class FunctionTest<SerializedObject>
{
    bool initialized = false;
    DataUnit*:link data_unit;
    list<int> list
    map<int, int> map

    function void initialize()
    {
        this->initialized = true;
        this->data_unit = DataStorage::shared().get<DataUnit>("unitname1");
    }

    function bool tests(Logger* logger):static
    {
        auto result = true;
        result = FunctionTest::test_create_objects(logger) && result;
        result = FunctionTest::test_for(logger) && result;
        result = FunctionTest::test_if_(logger) && result;
        result = FunctionTest::std_functions(logger) && result;
        result = FunctionTest::test_1(logger) && result;
        result = FunctionTest::test_while(logger) && result;
        return result;
    }

    function bool test_create_objects(Logger* logger):static
    {
        auto pointer = new FunctionTest();
        pointer->initialize();
        auto result = pointer->initialized;
        result = result && pointer->data_unit != nullptr;
        logger->push(result, "Create new object in function");
        return result;
    }

    function bool test_for(Logger* logger):static
    {
        auto result = true;
        auto units = DataStorage::shared().units;
        int index = 0;
        int count = map_size(units);
        for(auto& pair : units)
        {
            ++index;
        }
        result = result && index == count;
        logger->push(result, "FOR(AUTO& PAIR : MAP)");

        index = 0;
        for(auto&& [name, unit] : units)
        {
            ++index;
        }
        result = result && index == count;
        logger->push(result, "FOR(AUTO&& [NAME, UNIT] : UNITS)");

        index = 0;
        for(int i=0; i<count; ++i)
        {
            ++index;
        }
        result = result && index == count;
        logger->push(result, "FOR(int i=0; i<count; ++i)");

        index = 0;
        for(int i=count; i>0; --i)
        {
            ++index;
        }
        result = result && index == count;
        logger->push(result, "FOR(int i=count; i>0; --i)");

        index = 0;
        auto count2 = count*2;
        for(int i=0; i<count2; i+=2)
        {
            ++index;
        }
        result = result && index == count;
        logger->push(result, "FOR(int i=0; i<count*2; i+=2)");

        return result;
    }

    function bool test_while(Logger* logger):static
    {
        auto result = true;
        std::vector<int> test_vector;

        int index = 0;
        while(index < 10)
        {
            list_push(test_vector, index);
            index++;
        }
        result = list_size(test_vector) == 10;
        logger->push(result, "while index < 10");
        return result;
    }

    function bool test_if_(Logger* logger):static
    {
        bool result = true;
        if(true)
        {
            result = result && true;
        }
        else
        {
            result = false;
        }
        if(true)
        {
            result = result && true;
            result = result && true;
        }
        else
        {
            result = false;
            result = false;
        }
        if(true)
            result = result && true;
        else
            result = false;

        if(true)
            result = result && true;
        else if(false)
            result = false;

        logger->push(result, "IF-ELSE");
        return result;
    }

    function bool std_functions(Logger* logger):static
    {
        auto result = true;
        auto pointer = new FunctionTest();

        list_push(pointer->list, 1);
        result = result && list_size(pointer->list) == 1;
        //result = result && in_list(1, pointer->list);

        pointer->map[1] = 1;
        result = result && map_size(pointer->map) == 1;
        result = result && in_map(1, pointer->map);

        logger->push(result, "std functions");
        return result;
    }

    function bool test_1(Logger* logger):static {
        auto user = new TestUser1();
		auto result = FunctionTest::test_1_1(user);
		logger->push(result, "Functions: test 1");
		return result;
	}
    function bool test_1_1(TestUser1* user):static {
		auto result = user->result;
		return result;
	}
}

class TestUser1<SerializedObject>
{
    bool result = true
}

class TestFactory<SerializedObject>
{
    function bool tests(Logger* logger):static
    {
        bool result = true;
        result = TestFactory::test(logger) && result;
        return result;
    }

    function bool test(Logger* logger):static
    {
        bool result = true;
        auto command = new RequestBar();
        auto string = Factory::serialize_command(command);

        auto command2 = Factory::create_command(string);
        result = logger->push(command2 != nullptr, " - TestFactory: commnd_2 deserialized") && result;
        if(result)
        {
            result = logger->push(command2->get_type() == command->get_type(), " - TestFactory: commnd_type == commnd2_type deserialized") && result;
        }
        return result;
    }
}












