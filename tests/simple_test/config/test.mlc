class AllTests
{
    function bool run(Logger* logger):static
    {
        bool result = true;
        result = FunctionTest::tests(logger) && result;
        result = DataUnit::tests(logger) && result;
        result = AllTypes::tests(logger) && result;
        result = TestFactory::tests(logger) && result;
        result = ExceptionTest::test() && result;

        return result;
    }
}

class core/CommandBase
{
	int:key user_id = 0
	int current_time = 0
}

class AllTypesChildren
{
	int value
}

class AllTypes
{
	//simple
	int int_value0 = 0
	int int_value1
	float float_value0 = 0
	float float_value1
	bool bool_value0 = true
	bool bool_value1 = false
	string str_value0 = ""
	string str_value1
	list<int> int_list
	list<float> float_list
	list<bool> bool_list
	list<string> string_list
	map<int, string> int_string_map
	map<float, string> float_string_map
	map<bool, string> bool_string_map
	map<string, string> string_string_map
	map<string, int> string_int_map
	map<string, float> string_float_map
	map<string, bool> string_bool_map

	AllTypesChildren object
	AllTypesChildren* object_ptr = 0
	list<AllTypesChildren> object_list
	list<AllTypesChildren*> object_ptr_list
	map<string, AllTypesChildren> object_map
	map<string, AllTypesChildren*> object_ptr_map

	list<TestEnum> enum_list
	map<TestEnum, int> enum_map

    function void initialize()
    {
        this->int_value0 = 1;
        this->int_value1 = 1;
        this->float_value0 = 1.f;
        this->float_value1 = 1.0f;
        this->bool_value0 = false;
        this->bool_value1 = true;
        this->str_value0 = "test_string";
        this->str_value1 = "test_string";

        list_push(this->int_list, 0);
        list_push(this->int_list, 1);
        list_push(this->float_list, 0.f);
        list_push(this->float_list, 1.f);
        list_push(this->bool_list, true);
        list_push(this->bool_list, true);
        list_push(this->string_list, "0");
        list_push(this->string_list, "1");

        this->int_string_map[0] = "0";
        this->int_string_map[1] = "1";
        this->bool_string_map[true] = "0";
        this->bool_string_map[false] = "1";
        this->float_string_map[0.f] = "0";
        this->float_string_map[1.f] = "1";
        this->string_string_map["0"] = "0";
        this->string_string_map["1"] = "1";

        this->string_int_map["0"] = 0;
        this->string_int_map["1"] = 1;
        this->string_bool_map["0"] = true;
        this->string_bool_map["1"] = false;
        this->string_float_map["0"] = 0.f;
        this->string_float_map["1"] = 1.f;
        this->string_string_map["0"] = "0";
        this->string_string_map["1"] = "1";

        this->object.value = 0;
        this->object_ptr = new AllTypesChildren();
        this->object_ptr->value = 0;

        list_push(this->enum_list, TestEnum::value1);
        list_push(this->enum_list, TestEnum::value2);

        this->enum_map[TestEnum::value1] = 1;
        this->enum_map[TestEnum::value2] = 2;
    }

    function bool tests(Logger* logger):static
    {
        bool result = true;

        auto inst = new AllTypes();
        inst->initialize();

        return result;
    }
}

class Request:visitor
{
}
class RequestFoo<Request>
{
}
class RequestBar<Request>
{
}
class RequestBar2<RequestBar>
{
}

class RequestAcceptor<IVisitorRequest>
{
    int base = 0
    int foo = 0
    int bar = 0
    int bar2 = 0
    function void visit(Request* ctx)
    {
        this->base += 1;
    }
    function void visit(RequestAcceptor* ctx)
    {
        this->base += 1;
    }
    function void visit(RequestFoo* ctx)
    {
        this->foo += 1;
    }
    function void visit(RequestBar* ctx)
    {
        this->bar += 1;
    }
    function void visit(RequestBar2* ctx)
    {
        this->bar2 += 1;
    }
}

class TestRequestAcceptor<ITestRequestAcceptor>
{
    Request* request
    function void test_visitor()
    {
        RequestAcceptor acceptor;

        this->request = new RequestFoo();
        this->request->accept(&acceptor);
        this->assertTrue(acceptor.foo == 1);
        this->assertTrue(acceptor.bar == 0);
        this->assertTrue(acceptor.bar2 == 0);
        this->assertTrue(acceptor.base == 0);
        acceptor.foo = 0;

        this->request = new RequestBar();
        this->request->accept(&acceptor);
        this->assertTrue(acceptor.foo == 0);
        this->assertTrue(acceptor.bar == 1);
        this->assertTrue(acceptor.bar2 == 0);
        this->assertTrue(acceptor.base == 0);
        acceptor.bar = 0;

        this->request = new RequestBar2();
        this->request->accept(&acceptor);
        this->assertTrue(acceptor.foo == 0);
        this->assertTrue(acceptor.bar == 0);
        this->assertTrue(acceptor.bar2 == 1);
        this->assertTrue(acceptor.base == 0);
        acceptor.bar2 = 0;
    }
}

class Response:visitor
{
}

enum TestEnum:numeric
{
    value1
    value2
}

class TestEnumValue1<TestEnum>
{
	int parameter
}

class TestEnumValue2<TestEnum>
{
	int parameter
}

class TestToFor<TestEnum>
{
	int some_count
}

class FunctionTest
{
    bool initialized = false
    DataUnit*:link data_unit
    list<int> list
    map<int, int> map

    function void initialize()
    {
        this->initialized = true;
        this->data_unit = DataStorage::shared().get<DataUnit>("unitname1");
    }

    function bool tests(Logger* logger):static
    {
        auto result = true;
        result = FunctionTest::test_create_objects(logger) && result;
        result = FunctionTest::test_for(logger) && result;
        result = FunctionTest::test_if_(logger) && result;
        result = FunctionTest::std_functions(logger) && result;
        result = FunctionTest::test_1(logger) && result;
        result = FunctionTest::test_while(logger) && result;
        return result;
    }

    function bool test_create_objects(Logger* logger):static
    {
        auto pointer = new FunctionTest();
        pointer->initialize();
        auto result = pointer->initialized;
        result = result && pointer->data_unit != nullptr;
        return result;
    }

    function bool test_for(Logger* logger):static
    {
        auto result = true;
        auto units = DataStorage::shared().units;
        int index = 0;
        int count = map_size(units);
        for(auto& pair : units)
        {
            ++index;
        }
        result = result && index == count;

        index = 0;
        for(auto&& [name, unit] : units)
        {
            ++index;
        }
        result = result && index == count;

        index = 0;
        for(int i=0; i<count; ++i)
        {
            ++index;
        }
        result = result && index == count;

        index = 0;
        for(int i=count; i>0; --i)
        {
            ++index;
        }
        result = result && index == count;

        index = 0;
        auto count2 = count*2;
        for(int i=0; i<count2; i+=2)
        {
            ++index;
        }
        result = result && index == count;

        index = 0;
        int step = 2;
        for(int i=0; i<10; i+=step)
        {
            index += 1;
        }
        result = result && index == 5;

        TestToFor test_value;
        test_value.some_count = 2;
        index = 0;
        for(int i=0; i<test_value.some_count; ++i)
        {
            index += 1;
        }
        result = result && index == test_value.some_count;

        return result;
    }

    function bool test_while(Logger* logger):static
    {
        auto result = true;
        std::vector<int> test_vector;

        int index = 0;
        while(index < 10)
        {
            list_push(test_vector, index);
            index++;
        }
        result = list_size(test_vector) == 10;
        return result;
    }

    function bool test_if_(Logger* logger):static
    {
        bool result = true;
        if(true)
        {
            result = result && true;
        }
        else
        {
            result = false;
        }
        if(true)
        {
            result = result && true;
            result = result && true;
        }
        else
        {
            result = false;
            result = false;
        }
        if(true)
            result = result && true;
        else
            result = false;

        if(true)
            result = result && true;
        else if(false)
            result = false;
        return result;
    }

    function bool std_functions(Logger* logger):static
    {
        auto result = true;
        auto pointer = new FunctionTest();

        list_push(pointer->list, 1);
        result = result && list_size(pointer->list) == 1;
        //result = result && in_list(1, pointer->list);

        pointer->map[1] = 1;
        result = result && map_size(pointer->map) == 1;
        result = result && in_map(1, pointer->map);

        return result;
    }

    function bool test_1(Logger* logger):static
    {
        auto user = new TestUser1();
		auto result = FunctionTest::test_1_1(user);
		return result;
	}
    function bool test_1_1(TestUser1* user):static
    {
		auto result = user->result;
		return result;
	}
}

class TestUser1
{
    bool result = true
}

class TestFactory
{
    function bool tests(Logger* logger):static
    {
        bool result = true;
        result = TestFactory::test(logger) && result;
        return result;
    }

    function bool test(Logger* logger):static:cpp
    {
        bool result = true;

        auto command = new RequestBar();
#if SERIALIZE_FORMAT == JSON
        auto string = serialize_command_to_json<RequestBar>(command);
        auto command2 = create_command_from_json<Request>(string);
#endif
#if SERIALIZE_FORMAT == XML
        auto string = serialize_command_to_xml<RequestBar>(command);
        auto command2 = create_command_from_xml<Request>(string);
#endif
        result = (command2 != nullptr) && result;
        if(result)
        {
            result = (command2->get_type() == command->get_type()) && result;
        }
        return result;
    }
    function bool test(Logger* logger):static:py:php:js
    {
        return true;
    }
}

class DataComplexMap:storage
{
    string name
    map<int, list<float>> complex_map
    function void foo()
    {
    }
    function void bar_private():private
    {
    }
}

class DataListListBool:storage:cpp:py
{
    string name
    list<list<bool>> list_list_bool
    function void foo()
    {
    }
}

class TestDataComplexMap<ITestDataComplexMap>:tests
{
    function void test_foo()
    {
    }
    function void test_deserialize()
    {
        auto data = DataStorage::shared().get<DataComplexMap>("test");
        this->assertTrue(map_size(data->complex_map) == 1);
        this->assertTrue(list_size(data->complex_map.at(1)) == 2);
        this->assertTrue(data->complex_map.at(1)[0] == 1);
        this->assertTrue(data->complex_map.at(1)[1] == 2);
    }
}

class TestDataListListBool<ITestDataListListBool>:tests:cpp:py
{
    function void test_foo()
    {
        auto data = DataStorage::shared().get<DataListListBool>("test");
        this->assertTrue(list_size(data->list_list_bool) == 2);
        this->assertTrue(list_size(data->list_list_bool[0]) == 2);
        this->assertTrue(list_size(data->list_list_bool[1]) == 2);
        this->assertTrue(data->list_list_bool[0][0] == true);
        this->assertTrue(data->list_list_bool[0][1] == false);
        this->assertTrue(data->list_list_bool[1][0] == false);
        this->assertTrue(data->list_list_bool[1][1] == true);
    }
}

class StaticPointer
{
    CommandBase*:static command
}

class TestStaticPointer<ITestStaticPointer>
{
    fn void test_foo()
    {
        this->assertTrue(true);
    }
}

class ClassMissingTestMethod
{
    function void foo(){}
    function void bar(){}
}

class TestClassMissingTestMethod<ITestClassMissingTestMethod>
{
    fn void test_foo(){}
}