class clone/CloneObject
{
    int t

    function void foo()
    {
    }
}

class clone/CloneObject2<CloneObject>
{
    CloneObject* ptr

	list<CloneObject*> list1
	list<DataUnit:link> list2

	map<CloneObject*, CloneObject*>:cpp:py map1
	map<CloneObject*, DataUnit:link>:cpp:py map2
	map<DataUnit:link, CloneObject*>:cpp:py map3
	map<DataUnit:link, DataUnit:link>:cpp:py map4

    function void foo()
    {
    }
}

class clone/TestCloneObject<ITestCloneObject>:test
{
    function void test_foo()
    {
        auto object_a = new CloneObject();
        object_a->t = 1;

        auto object_b = clone_object(object_a);
        this->assertEqual(object_a->t, object_b->t);
    }
    function void test_clone2()
    {
        auto object_a = new CloneObject2();
        object_a->t = 1;
        object_a->ptr = new CloneObject();
        object_a->ptr->t = 10;

        auto object_b = clone_object(object_a);
        this->assertEqual(object_a->t, object_b->t);
        this->assertEqual(object_a->ptr->t, object_b->ptr->t);
    }


    function void test_copy_list_with_null():cpp:py
    {
        auto obj1 = new CloneObject2();
        list_push(obj1->list1, new CloneObject2());
        list_push(obj1->list1, nullptr);
        list_push(obj1->list1, new CloneObject2());
        auto obj2 = clone_object(obj1);
        this->assertEqual(list_size(obj2->list1), 3);
    }

    function void test_copy_list_with_null2():cpp:py
    {
        auto obj1 = new CloneObject2();
        list_push(obj1->list2, DataStorage::shared().get<DataUnit>("unitname1"));
        list_push(obj1->list2, nullptr);
        list_push(obj1->list2, DataStorage::shared().get<DataUnit>("unitname1"));
        auto obj2 = clone_object(obj1);
        this->assertEqual(list_size(obj2->list2), 3);
    }

    function void test_copy_map1():cpp:py
    {
        auto obj1 = new CloneObject2();
        obj1->map1[nullptr] = nullptr;
        auto obj2 = clone_object(obj1);
        this->assertTrue(in_map(nullptr, obj2->map1));
        this->assertTrue(obj2->map1.at(nullptr) == nullptr);
    }

    function void test_copy_map2():cpp:py
    {
        auto obj1 = new CloneObject2();
        obj1->map2[nullptr] = nullptr;
        auto obj2 = clone_object(obj1);
        this->assertTrue(in_map(nullptr, obj2->map2));
        //this->assertTrue(obj2->map2.at(nullptr) == nullptr);
    }

    function void test_copy_map3():cpp:py
    {
        auto obj1 = new CloneObject2();
        obj1->map3[nullptr] = nullptr;
        auto obj2 = clone_object(obj1);
        this->assertTrue(in_map(nullptr, obj2->map3));
        //this->assertTrue(obj2->map3.at(nullptr) == nullptr);
    }

    function void test_copy_map4():cpp:py
    {
        auto obj1 = new CloneObject2();
        obj1->map4[nullptr] = nullptr;
        auto obj2 = clone_object(obj1);
        this->assertTrue(map_size(obj2->map4) == 1)
        //this->assertTrue(in_map(nullptr, obj2->map4));
        //this->assertTrue(obj2->map4.at(nullptr) == nullptr);
    }
}
